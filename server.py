import socketimport threadingimport pickleclass Server:    def __init__(self, max_client, host):        self.max_client = max_client        self.host_server = host        self.port = 5555        self.server_sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        self.max_size_msg = 2000        self.Locker = threading.Lock()        self.qplayer = 0        print(f'Server Listen at {self.host_server}:{self.port}')        try:            self.server_sock.bind((self.host_server, self.port))        except Exception as e:            print(f"Exception bind: {e}")        self.server_sock.listen(max_client)        self.player_start_pos = ([0, 0, "L", None], [765, 450, 'L', None])        self.player_data = {}        self.members = []        while True:            conn, addr = self.server_sock.accept()            threading.Thread(target=self.Listen, args=(conn, addr)).start()    def Listen(self, conn, addr):        try:            while True:                msg = pickle.loads(conn.recv(self.max_size_msg))                # print('msg', msg)                client_id = addr[1]                if client_id not in self.members:                    self.members.append(client_id)                    self.qplayer = len(self.members)                    print(self.members)                if msg == 'CONNECT':                    self.connect(conn, client_id)                elif msg == 'Disconect':                    self.Disconnect(conn, client_id)                else:                    self.Sent(msg, conn, client_id)        except Exception as e:            print(f'ERROR LISTEN: {e}')    def Sent(self, msg, conn, client_id):        try:            self.coordinate_True(msg, client_id)            for member in self.members:                if member == client_id:                    if self.qplayer == 1:                        conn.send(pickle.dumps((self.player_data.get(client_id), None, self.qplayer)))                    continue                else:                    conn.send(pickle.dumps((self.player_data.get(client_id), self.player_data[member], self.qplayer)))                    continue        except Exception as e:            print(f'ERROR SEND: {e}')    def connect(self, conn, client_id):        try:            print('connect', self.qplayer)            if self.qplayer == 1:                # print('1 player')                conn.send(pickle.dumps((self.player_start_pos[0], 'None', self.qplayer)))                self.player_data[client_id] = self.player_start_pos[0]            if self.qplayer == 2:                for member in self.members:                    if member == client_id:                        continue                    else:                        conn.send(pickle.dumps((self.player_start_pos[1], self.player_data[member], self.qplayer)))                        self.player_data[client_id] = self.player_start_pos[1]                        continue        except Exception as e:            print(f'ERROR CONNECT: {e}')    def Disconnect(self, conn, client_id):        try:            print(client_id, 'покинул игру')            self.members.pop(self.members.index(client_id))            del self.player_data[client_id]            self.qplayer = len(self.members)            print(self.qplayer, self.player_data)        except Exception as e:            print(f'ERROR DISCONNECT: {e}')    def coordinate_True(self, msg, client_id):        print(self.player_data.get(client_id), "do")        if self.player_data.get(client_id)[0] + 15 == msg[0]:            self.player_data.get(client_id)[0] = msg[0]        elif self.player_data.get(client_id)[0] - 15 == msg[0]:            self.player_data.get(client_id)[0] = msg[0]        elif self.player_data.get(client_id)[0] == msg[0]:            self.player_data.get(client_id)[0] = msg[0]        else:            # print('naeb po x')            if self.player_data.get(client_id)[0] < msg[0]:                self.player_data.get(client_id)[0] += 15            else:                self.player_data.get(client_id)[0] -= 15        if self.player_data.get(client_id)[1] + 15 == msg[1]:            self.player_data.get(client_id)[1] = msg[1]        elif self.player_data.get(client_id)[1] - 15 == msg[1]:            self.player_data.get(client_id)[1] = msg[1]        elif self.player_data.get(client_id)[1] == msg[1]:            self.player_data.get(client_id)[1] = msg[1]        else:            # print('naeb po y')            if self.player_data.get(client_id)[1] < msg[1]:                self.player_data.get(client_id)[1] += 15            else:                self.player_data.get(client_id)[1] -= 15        self.player_data.get(client_id)[2] = msg[2]        self.player_data.get(client_id)[3] = msg[3]        print(self.player_data.get(client_id), "posle")