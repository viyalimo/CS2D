import pygamefrom Character import Water_animclass Map:    def __init__(self, num_map):        self.color = ('red', "blue", 'green')        self.num_map = num_map        self.width = None        self.height = None        self.tile_size = 45        self.imbg1 = pygame.image.load('images/grass.jpg').convert_alpha()        self.imbg1 = pygame.transform.scale(self.imbg1, [self.tile_size, self.tile_size])        self.imbg2 = pygame.image.load('images/границы карты.png').convert_alpha()        self.imbg2 = pygame.transform.scale(self.imbg2, [self.tile_size, self.tile_size])        self.imbg5 = pygame.image.load('images/камень.png').convert_alpha()        self.imbg5 = pygame.transform.scale(self.imbg5, [self.tile_size, self.tile_size])        self.imbg6 = pygame.image.load('images/мост.png').convert_alpha()        self.imbg6 = pygame.transform.scale(self.imbg6, [self.tile_size, self.tile_size])        self.imbgNM = pygame.image.load('most/N_мост.png').convert_alpha()        self.imbgNM = pygame.transform.scale(self.imbgNM, [self.tile_size, self.tile_size])        self.imbgSM = pygame.image.load('most/S_мост.png').convert_alpha()        self.imbgSM = pygame.transform.scale(self.imbgSM, [self.tile_size, self.tile_size])        self.imbgWR = pygame.image.load('rever/Wrev.png').convert_alpha()        self.imbgWR = pygame.transform.scale(self.imbgWR, [self.tile_size, self.tile_size])        self.imbgER = pygame.image.load('rever/Erev.png').convert_alpha()        self.imbgER = pygame.transform.scale(self.imbgER, [self.tile_size, self.tile_size])        self.imbgNEM = pygame.image.load('most/grass_NEM.png').convert_alpha()        self.imbgNEM = pygame.transform.scale(self.imbgNEM, [self.tile_size, self.tile_size])        self.imbgNWM = pygame.image.load('most/grass_NWM.png').convert_alpha()        self.imbgNWM = pygame.transform.scale(self.imbgNWM, [self.tile_size, self.tile_size])        self.imbgSEM = pygame.image.load('most/grass_SEM.png').convert_alpha()        self.imbgSEM = pygame.transform.scale(self.imbgSEM, [self.tile_size, self.tile_size])        self.imbgSWM = pygame.image.load('most/grass_SWM.png').convert_alpha()        self.imbgSWM = pygame.transform.scale(self.imbgSWM, [self.tile_size, self.tile_size])        self.obstacles_player = []  # Список для хранения объектов препятствий        self.player_x = 0        self.player_y = 0        self.player_weight = 0        self.player_height = 0        self.obstac_bul = []        self.L_obst()        self.speed = 15        self.Direct = "L"        self.player_Direct = "L"        self.player_rect = pygame.Rect(self.player_x, self.player_y, self.player_weight, self.player_height)        self.L_obst()        self.water_anim = 0        # Добавьте здесь код для загрузки карты, тайлов и других параметров.    def L_obst(self):        smo = 0        bul = 0        world = self.View_world(self.num_map)[0]        for row in range(len(world)):            for col in range(len(world[row])):                x = col * self.tile_size                y = row * self.tile_size                if world[row][col] == "O":                    self.obstacles_player.append((x, y, self.tile_size, self.tile_size))                elif world[row][col] == "S":                    self.obstacles_player.append((x, y + 20, self.tile_size, self.tile_size // 2))                elif world[row][col] == "N":                    self.obstacles_player.append((x, y, self.tile_size, self.tile_size // 2))                elif world[row][col] == "G":                    self.obstacles_player.append((x + self.tile_size // 2, y, self.tile_size // 2, self.tile_size // 2))                elif world[row][col] == "Z":                    self.obstacles_player.append((x, y, self.tile_size // 2, self.tile_size // 2))                elif world[row][col] == "Y":                    self.obstacles_player.append(                        (x, y + self.tile_size // 2, self.tile_size // 2, self.tile_size // 2))                elif world[row][col] == "X":                    self.obstacles_player.append(                        (x + self.tile_size // 2, y + self.tile_size // 2, self.tile_size // 2, self.tile_size // 2))                if world[row][col] == 'w':                    self.obstac_bul.append((x + 25, y, 20, self.tile_size))                elif world[row][col] == 'E':                    self.obstac_bul.append((x, y, 20, self.tile_size))    def View_world(self, view_world):        if view_world == 1:            world = ["TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTW     TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBOOBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBOBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBOOBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBOOOOOOBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBOOBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBGNNNNNNZBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBMMMMMMBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBMMMMMMBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBMMMMMMBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBXSSSSSSYBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBOOOOOBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBOOBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBOOBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBOOBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBOOBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TBBBBBBBBBBBBBBBBBBBBBBBBBBBBBw      EBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBT",                     "TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT      TTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"                     ]            self.width = len(world[0]) * self.tile_size            self.height = (len(world)) * self.tile_size            data = (world, self.width, self.height)            return data    def DRAWMAP(self, win, camera):        world = self.View_world(self.num_map)[0]        win.fill('black')        for row in range(len(world)):            for col in range(len(world[row])):                x = col * self.tile_size                y = row * self.tile_size                if world[row][col] == 'B':                    tile_rect = pygame.Rect(x, y, self.tile_size, self.tile_size)                    shifted_tile_rect = camera.apply(tile_rect)  # Применить сдвиг к тайлу                    win.blit(self.imbg1, shifted_tile_rect)                elif world[row][col] == 'T':                    tile_rect = pygame.Rect(x, y, self.tile_size, self.tile_size)                    shifted_tile_rect = camera.apply(tile_rect)  # Применить сдвиг к тайлу                    win.blit(self.imbg2, shifted_tile_rect)                # elif world[row][col] == 'N':                #     tile_rect = pygame.Rect(x, y, tile_Size, tile_Size)                #     shifted_tile_rect = camera.apply(tile_rect)  # Применить сдвиг к тайлу                #     win.blit(self.imbg4, shifted_tile_rect)                elif world[row][col] == 'W':                    tile_rect = pygame.Rect(x, y, self.tile_size, self.tile_size)                    shifted_tile_rect = camera.apply(tile_rect)  # Применить сдвиг к тайлу                    win.blit(Water_anim(self.water_anim), shifted_tile_rect)                    if self.water_anim < 3:                        self.water_anim += 1                    else:                        self.water_anim = 0                elif world[row][col] == 'M':                    tile_rect = pygame.Rect(x, y, self.tile_size, self.tile_size)                    shifted_tile_rect = camera.apply(tile_rect)  # Применить сдвиг к тайлу                    win.blit(self.imbg6, shifted_tile_rect)                elif world[row][col] == "O" or world[row][col] == "S" or world[row][col] == "N" or world[row][col] == "G" or world[row][col] == "Z" or world[row][col] == "X" or world[row][col] == "Y":                    tile_rect = pygame.Rect(x, y, self.tile_size, self.tile_size)                    shifted_tile_rect = camera.apply(tile_rect)                    if world[row][col] == "O":                        win.blit(self.imbg5, shifted_tile_rect)                    elif world[row][col] == "S":                        win.blit(self.imbgSM, shifted_tile_rect)                    elif world[row][col] == "N":                        win.blit(self.imbgNM, shifted_tile_rect)                    elif world[row][col] == "G":                        win.blit(self.imbgNEM, shifted_tile_rect)                    elif world[row][col] == "Z":                        win.blit(self.imbgNWM, shifted_tile_rect)                    elif world[row][col] == "Y":                        win.blit(self.imbgSWM, shifted_tile_rect)                    elif world[row][col] == "X":                        win.blit(self.imbgSEM, shifted_tile_rect)                elif world[row][col] == "w" or world[row][col] == 'E':                    tile_rect = pygame.Rect(x, y, self.tile_size, self.tile_size)                    shifted_tile_rect = camera.apply(tile_rect)                    if world[row][col] == 'w':                        win.blit(self.imbgWR, shifted_tile_rect)                    elif world[row][col] == 'E':                        win.blit(self.imbgER, shifted_tile_rect)                else:                    tile_rect = pygame.Rect(x, y, self.tile_size, self.tile_size)                    # pygame.draw.rect(win, 'blue', camera.apply(pygame.Rect(x, y, self.tile_size, self.tile_size)))                    shifted_tile_rect = camera.apply(tile_rect)        return win    def H_W(self):        data = (self.View_world(self.num_map)[1], self.View_world(self.num_map)[2])        return data    def get_player(self, player):        self.player_x = player.x        self.player_y = player.y        self.player_weight = player.player_weight        self.player_height = player.player_height        self.player_Direct = player.Direction